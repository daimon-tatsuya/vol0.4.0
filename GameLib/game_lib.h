#ifndef INCLUDED_GAME_LIB
#define INCLUDED_GAME_LIB
//******************************************************************************
//
//      GameLib
//
//      ECC College of Computer & Multimedia
//
//******************************************************************************

//------< インクルード >---------------------------------------------------------
#define NOMINMAX
#include <Windows.h>
#include <d3d11.h>

#include "debug.h"
#include "primitive.h"
#include "blender.h"

#include "dxtk_audio.h"
#include "texture.h"
#include "font.h"

#include "input_manager.h"

namespace GameLib
{

    namespace system
    {
        static const float SCREEN_WIDTH = 1280.f;  // スクリーンの幅
        static const float SCREEN_HEIGHT = 720.f; // スクリーンの高さ

        static const int TEXTURE_NUM = 256U;                   // テクスチャの最大枚数
        static const int DEBUG_INSTANCE_NUM = 8192U;           // デバッグ文字の最大表示数
        static const int PRIMITIVE_BATCH_INSTANCE_NUM = 4096U; // プリミティブバッチの最大インスタンス数
    }

    //==========================================================================
    //
    //		ライブラリ初期設定＆終了処理、Windows APIなど
    //
    //==========================================================================

    //------------------------------------------------------
    //  ライブラリ初期設定
    //------------------------------------------------------
    //  LPCTSTR caption     タイトルバーに表示される見出し
    //  int width           ウインドウの幅
    //  int height          ウインドウの高さ
    //  bool isFullscreen   フルスクリーンにするかどうか（Releaseモード時のみ有効）
    //  double frameRate    フレームレート
    //------------------------------------------------------
    void init(LPCTSTR, int width = ( 640 ), int height = ( 480 ),
        bool isFullscreen = ( false ), double frameRate = ( 60.0 ));

    //------------------------------------------------------
    //  ライブラリ終了処理
    //------------------------------------------------------
    void uninit();

    //------------------------------------------------------
    //  ゲームループ（実態はメッセージループ）
    //------------------------------------------------------
    //  bool isShowFrameRate  フレームレートを表示させるか
    //------------------------------------------------------
    //  戻り値：bool           WM_QUITが発行されるとfalseを返す
    //------------------------------------------------------
    bool gameLoop(bool isShowFrameRate = ( false ));

    //------------------------------------------------------
    //  画面クリア
    //------------------------------------------------------
    //  VECTOR4* color          塗りつぶす色 (r, g, b, a)
    //------------------------------------------------------
    void clear(const VECTOR4&);

    //------------------------------------------------------
    //  画面クリア
    //------------------------------------------------------
    //  float r                 塗りつぶす色 (r)
    //  float g                 塗りつぶす色 (g)
    //  float b                 塗りつぶす色 (b)
    //------------------------------------------------------
    void clear(float r = ( 0.0f ), float g = ( 0.0f ), float b = ( 0.0f ));

    //------------------------------------------------------
    //  画面フリップ
    //------------------------------------------------------
    //  UINT SyncInterval       1を設定
    //  UINT Flags              0を設定
    //------------------------------------------------------
    HRESULT present(UINT SyncInterval = ( 1 ), UINT Flags = ( 0 ));

    //------------------------------------------------------
    //  ブレンドモード設定
    //------------------------------------------------------
    //  const Blender::BLEND_STATE& blend      ブレンドステート
    //------------------------------------------------------
    void setBlendMode(Blender::BLEND_STATE);

    //------------------------------------------------------
    //  スプライト読み込み
    //------------------------------------------------------
    //  Sprite**　ppSpr             スプライトのダブルポインタ
    //  const wchar_t* fileName     ファイルの名前
    //------------------------------------------------------
    void sprite_load(Sprite**, const wchar_t*);

    //------------------------------------------------------
    //  スプライト描画
    //------------------------------------------------------
    //  Sprite* pSpr             スプライトのポインタ
    //  float x, float y            描画位置
    //  float sx, float sy          描画スケール
    //  float tx, float ty,         元画像位置
    //  float tw, float th,         元画像の幅、高さ
    //  float cx, float cy,         元画像の基準点
    //  float angle,                描画する角度
    //  float r, g, b, a            色（r, g, b, a)
    //------------------------------------------------------
    void sprite_render(Sprite*, 
        float, float, float sx = ( 1.0f ), float sy = ( 1.0f ),
        float tx = ( 0.0f ), float ty = ( 0.0f ), float tw = ( 0.0f ), float th = ( 0.0f ), 
        float cx = ( 0.0f ), float cy = ( 0.0f ), float angle = ( 0.0f ), 
        float r = ( 1.0f ), float g = ( 1.0f ), float b = ( 1.0f ), float a = ( 1.0f));

    //==========================================================================
    //
    //		DirectX11関連
    //
    //==========================================================================

    //------< DirectX11 >-------------------------------------------------------
    namespace DirectX11
    {

        //------------------------------------------------------
        //  DirectX11の初期化
        //------------------------------------------------------
        //  HWND hwnd           ウインドウハンドル
        //  int width           ウインドウの幅
        //  int height          ウインドウの高さ
        //  bool isFullscreen   フルスクリーンにするかどうか
        //------------------------------------------------------
        HRESULT init(HWND, int, int, bool);

        //------------------------------------------------------
        //  DirectX11の終了処理
        //------------------------------------------------------
        void uninit();

    }

    //==========================================================================
    //
    //		ウインドウ関連
    //
    //==========================================================================

    namespace window
    {

        //------------------------------------------------------
        //  ウインドウ初期設定（ウインドウを作成して表示する）
        //------------------------------------------------------
        //  LPCTSTR caption     タイトルバーに表示される見出し
        //  int width           ウインドウの幅
        //  int height          ウインドウの高さ
        //------------------------------------------------------
        //  戻り値：HWND         生成されたウインドウのハンドル
        //------------------------------------------------------
        HWND init(LPCTSTR, int, int);

        //------------------------------------------------------
        //  ウインドウ終了処理
        //------------------------------------------------------
        void uninit();

    }

    //==========================================================================
    //
    //		テクスチャ
    //
    //==========================================================================

    namespace texture
    {

        //------------------------------------------------------
        //  テクスチャマネージャ初期化
        //------------------------------------------------------
        //  size_t max      テクスチャの最大数を設定
        //------------------------------------------------------
        void init(size_t);

        //------------------------------------------------------
        //  テクスチャマネージャ終了処理
        //------------------------------------------------------
        void uninit();

        //------------------------------------------------------
        //  テクスチャのロード（空き番号を探してロード）
        //------------------------------------------------------
        //  const wchar_t* fileName     テクスチャファイルのパス
        //  size_t maxInstance          インスタンスの最大数
        //------------------------------------------------------
        //  戻り値：テクスチャ番号、-1：ロードエラー
        //------------------------------------------------------
        int load(const wchar_t*, size_t maxInstance = ( 1U ));

        //------------------------------------------------------
        //  テクスチャのロード（番号を指定してロード）
        //------------------------------------------------------
        //  int texNo                   テクスチャのインデックス
        //  const wchar_t* fileName     テクスチャファイルのパス
        //  size_t maxInstance          インスタンスの最大数
        //------------------------------------------------------
        void load(int, const wchar_t*, size_t maxInstance = ( 1U ));

        //------------------------------------------------------
        //  テクスチャのロード（ロードテクスチャのデータを使ってロード）
        //------------------------------------------------------
        //  LoadTexture* data       テクスチャ読み込み用データ
        //------------------------------------------------------
        void load(const LoadTexture*);

        //------------------------------------------------------
        //  テクスチャの解放（番号を指定して解放）
        //------------------------------------------------------
        //  int texNo   テクスチャのインデックス
        //------------------------------------------------------
        void release(int);

        //------------------------------------------------------
        //  テクスチャの解放（ロードテクスチャのデータを使って解放）
        //------------------------------------------------------
        //  LoadTexture* data   テクスチャ読み込み用データ
        //------------------------------------------------------
        void release(const LoadTexture*);

        //------------------------------------------------------
        //  テクスチャの解放（全て）
        //------------------------------------------------------
        void releaseAll();

        //------------------------------------------------------
        //  描画の前処理
        //------------------------------------------------------
        //  int texNo           描画を開始するテクスチャNo.
        //------------------------------------------------------
        void begin(int);

        //------------------------------------------------------
        //  描画の後処理
        //------------------------------------------------------
        //  int texNo           描画を終えるテクスチャNo.
        //------------------------------------------------------
        void end(int);

        //------------------------------------------------------
        //  テクスチャの描画
        //------------------------------------------------------
        //  int texNo                          テクスチャのインデックス
        //  float x, float y                   位置
        //  float scaleX, float scaleY         スケール
        //  float left, float top              切抜位置
        //  float width, float height          切抜サイズ
        //  float centerX, float centerY       中心
        //  float angle                        角度(radian)
        //  float r, float g, float b, float a 色
        //------------------------------------------------------
        void draw(int, 
            float, float, float scaleX = ( 1 ), float scaleY = ( 1 ), 
            float left = ( 0 ), float top = ( 0 ), float width = ( 0 ), float height = ( 0 ),
            float centerX = ( 0 ), float centerY = ( 0 ), float angle = ( 0 ), 
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ));

        //------------------------------------------------------
        //  テクスチャの描画
        //------------------------------------------------------
        //  int texNo                  テクスチャのインデックス
        //  const VECTOR2& position    位置
        //  const VECTOR2& scale       スケール
        //  const VECTOR2& texPos      切抜位置
        //  const VECTOR2& texSize     切抜サイズ
        //  const VECTOR2& center      中心
        //  float angle                角度(radian)
        //  const VECTOR4& color       色
        //------------------------------------------------------
        void draw(int, 
            const VECTOR2&, const VECTOR2& scale = ( VECTOR2(1, 1) ), 
            const VECTOR2& texPos= ( VECTOR2(0, 0) ), const VECTOR2& texSize = ( VECTOR2(0, 0) ),
            const VECTOR2& center = ( VECTOR2(0, 0) ), float angle = 0, 
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ));

    }

    //==========================================================================
    //
    //		primitive
    //
    //==========================================================================

    namespace primitive
    {

        //------------------------------------------------------
        //  矩形描画
        //------------------------------------------------------
        //  float x         描画位置x     float y        描画位置y
        //  float w         幅            float h        高さ
        //  float centerX   基準点x       float centerY  基準点y
        //  float angle     角度 (radian)
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //------------------------------------------------------
        void rect(float, float, float, float,
            float cx = ( 0 ), float cy = ( 0 ), float angle = ( 0 ),
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ));

        //------------------------------------------------------
        //  矩形描画
        //------------------------------------------------------
        //  const VECTOR2& pos      描画位置 (x, y)
        //  const VECTOR2& size     幅高さ   (w, h)
        //  const VECTOR2& center   基準点   (x, y)
        //  float angle             角度     (radian)
        //  const VECTOR4& color    色       (r, g, b, a) (0.0f ~ 1.0f)
        //------------------------------------------------------
        void rect(const VECTOR2&, const VECTOR2&,
            const VECTOR2& center = ( VECTOR2(0, 0) ), float angle = ( 0 ),
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ));

        //------------------------------------------------------
        //  線描画
        //------------------------------------------------------
        //  float x1        始点 x    float y1    // 始点 y
        //  float x2        終点 x    float y2    // 終点 y
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  float width     幅
        //------------------------------------------------------
        void line(float, float, float, float,
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ),
            float width = ( 1 ));

        //------------------------------------------------------
        //  線描画
        //------------------------------------------------------
        //  const VECTOR2& from     始点 (x, y)
        //  const VECTOR2& to       終点 (x, y)
        //  const VECTOR4& color    色   (r, g, b, a)
        //  float width             幅
        //------------------------------------------------------
        void line(const VECTOR2&, const VECTOR2&,
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), float width = ( 1 ));

        //------------------------------------------------------
        //  円描画
        //------------------------------------------------------
        //  float x         中心位置 x    float y      // 中心位置 y
        //  float radius    半径
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  int n           何角形か
        //------------------------------------------------------
        void circle(float, float, float,
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ),
            int n = ( 32 ));

        //------------------------------------------------------
        //  円描画
        //------------------------------------------------------
        //  const VECTOR2& pos      中心位置 (x, y)
        //  float radius            半径
        //  const VECTOR4& color    色   (r, g, b, a)
        //  int n                   何角形か
        //------------------------------------------------------
        void circle(const VECTOR2&, float,
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), int n = ( 32 ));

        //------------------------------------------------------
        //  四角ポリゴン描画（頂点指定）
        //------------------------------------------------------
        //  const VECTOR2(&v)[4]    頂点の配列（大きさ4）
        //  float r     色 r (0.0f ~ 1.0f)
        //  float g     色 g (0.0f ~ 1.0f)
        //  float b     色 b (0.0f ~ 1.0f)
        //  float a     色 a (0.0f ~ 1.0f)
        //------------------------------------------------------
        void quad(const VECTOR2(&)[4],
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ));

        //------------------------------------------------------
        //  四角ポリゴン描画（頂点指定）
        //------------------------------------------------------
        //  const VECTOR2(&v)[4]    頂点の配列（大きさ4）
        //  const VECTOR4& color    色 (r, g, b, a)
        //------------------------------------------------------
        void quad(const VECTOR2(&)[4],
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ));

    }

    //==========================================================================
    //
    //		primitive_batch
    //
    //==========================================================================

    namespace primitive_batch
    {

        //------------------------------------------------------
        //	前処理
        //------------------------------------------------------
        void begin();

        //------------------------------------------------------
        //  後処理
        //------------------------------------------------------
        void end();

        //------------------------------------------------------
        //  矩形描画
        //------------------------------------------------------
        //  float x         float y     中心位置 (x, y)
        //  float w         float h     幅・高さ (w, h)
        //  float cx        float cy    中心 (cx, cy)
        //  float angle     角度 (radian)
        //  float r         色r  (0.0f ~ 1.0f)
        //  float g         色g  (0.0f ~ 1.0f)
        //  float b         色b  (0.0f ~ 1.0f)
        //  float a         色a  (0.0f ~ 1.0f)
        //------------------------------------------------------
        void rect(float, float, float, float,
            float cx = ( 0 ), float cy = ( 0 ), float angle = ( 0 ),
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ));

        //------------------------------------------------------
        //  矩形描画
        //------------------------------------------------------
        //  const VECTOR2& pos      中心位置 (x, y)
        //  const VECTOR2& size     幅高さ   (w, h)
        //  const VECTOR2& center   中心     (x, y)
        //  float angle             角度     (radian)
        //  const VECTOR4& color    色       (r, g, b, a)
        //------------------------------------------------------
        void rect(const VECTOR2&, const VECTOR2&,
            const VECTOR2& center = ( VECTOR2(0, 0) ), float angle = ( 0 ),
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ));

        //------------------------------------------------------
        //  線描画
        //------------------------------------------------------
        //  float x1        始点 x
        //  float y1        始点 y
        //  float x2        終点 x
        //  float y2        終点 y
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  float width     幅
        //------------------------------------------------------
        void line(float, float, float, float,
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ),
            float width = ( 1 ));

        //------------------------------------------------------
        //  線描画
        //------------------------------------------------------
        //  const VECTOR2& from     始点 (x, y)
        //  const VECTOR2& to       終点 (x, y)
        //  const VECTOR4& color    色   (r, g, b, a)
        //  float width             幅
        //------------------------------------------------------
        void line(const VECTOR2&, const VECTOR2&,
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ), float width = ( 1 ));

    }

    //==========================================================================
    //
    //		music
    //
    //==========================================================================

    namespace music
    {

        //------------------------------------------------------
        //  音楽のロード
        //------------------------------------------------------
        //  int trackNo    読み込むトラックのインデックス(0 ~ 31)
        //  const wchar_t* 音楽ファイルのパス(*.wav形式のみ)
        //  float volume   音楽のボリューム(0.0f ~ 1.0f)
        //------------------------------------------------------
        void load(int, const wchar_t*, float volume = ( 0.5f ));

        //------------------------------------------------------
        //  音楽の解放
        //------------------------------------------------------
        //  int trackNo    解放するトラックのインデックス(0 ~ 31)
        //------------------------------------------------------
        void unload(int);

        //------------------------------------------------------
        //  音楽の再生
        //------------------------------------------------------
        //  int trackNo    再生するトラックのインデックス(0 ~ 31)
        //  bool isLoop    ループ再生するかどうか(する:true,しない:false)
        //------------------------------------------------------
        void play(int, bool isLoop = ( false ));

        //------------------------------------------------------
        //  音楽の停止
        //------------------------------------------------------
        //  int trackNo    停止するトラックのインデックス(0 ~ 31)
        //------------------------------------------------------
        void stop(int);

        //------------------------------------------------------
        //  音楽の一時停止
        //------------------------------------------------------
        //  int trackNo    一時停止するトラックのインデックス(0 ~ 31)
        //------------------------------------------------------
        void pause(int);

        //------------------------------------------------------
        //  音楽の再開(pauseからの再開)
        //------------------------------------------------------
        //  int trackNo    再開させるトラックのインデックス(0 ~ 31)
        //------------------------------------------------------
        void resume(int);

        //------------------------------------------------------
        //  音楽のボリューム設定
        //------------------------------------------------------
        //  int trackNo    再開させるトラックのインデックス(0 ~ 31)
        //  float volume   音楽のボリューム(0.0f ~ 1.0f)
        //------------------------------------------------------
        void setVolume(int, float);

        //--------------------------------
        //  音楽のクリア
        //--------------------------------
        void clear();

        //------------------------------------------------------
        //  SoundStateの取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //------------------------------------------------------
        DirectX::SoundState getState(int);

        //------------------------------------------------------
        //  ループの有無の取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //------------------------------------------------------
        bool isLooped(int);

        //------------------------------------------------------
        //  panの設定
        //  int trackNo                     トラック番号 (0 ~ 31)
        //  float pan                       pan (-1.0f ~ 1.0f)
        //------------------------------------------------------
        void setPan(int, float);

        //------------------------------------------------------
        //  pitchの設定
        //  int trackNo                     トラック番号 (0 ~ 31)
        //  float pitch                     pitch (-1.0f ~ 1.0f)
        //------------------------------------------------------
        void setPitch(int, float);

        //------------------------------------------------------
        //  フォーマットの取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //------------------------------------------------------
        const WAVEFORMATEX* getFormat(int);

        //------------------------------------------------------
        //  音楽が使用中かどうか
        //  int trackNo                     トラック番号 (0 ~ 31)
        //------------------------------------------------------
        bool isInUse(int);
    }

    //==========================================================================
    //
    //		sound
    //
    //==========================================================================

    namespace sound
    {

        //------------------------------------------------------
        //  効果音ファイルのロード
        //------------------------------------------------------
        //  const wchar_t* xwbFileName  効果音ファイルのパス
        //  float volume                効果音のボリューム(0.0f ~ 1.0f)
        //------------------------------------------------------
        void load(const wchar_t*, float volume = ( 0.5f ));

        //------------------------------------------------------
        //  効果音の再生
        //------------------------------------------------------
        //  int trackNo     効果音ファイルのインデックス
        //------------------------------------------------------
        void play(int);

        //------------------------------------------------------
        //  効果音のボリューム設定
        //------------------------------------------------------
        //  int trackNo    設定する効果音のインデックス(0 ~ 127)
        //  float volume   効果音のボリューム(0.0f ~ 1.0f)
        //------------------------------------------------------
        void setVolume(int, float);
    }

    //==========================================================================
    //
    //		debug
    //
    //==========================================================================

    namespace debug
    {
        //------------------------------------------------------
        //  デバッグ文字列をセットする（キューに格納する）
        //------------------------------------------------------
        //  const char* format, ...     表示する文字列(printfと同じ書式)
        //------------------------------------------------------
        void setString(const char*, ...);

        //------------------------------------------------------
        //  デバッグ文字列を表示させる
        //------------------------------------------------------
        //  float r     赤成分(0.0f ~ 1.0f)
        //  float g     緑成分(0.0f ~ 1.0f)
        //  float b     青成分(0.0f ~ 1.0f)
        //  float sx    スケールx
        //  float sy    スケールy
        //------------------------------------------------------
        void display(float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), 
            float sx = ( 1 ), float sy = ( 1 ));

    }

    //==========================================================================
    //
    //		font
    //
    //==========================================================================

    namespace font
    {

        //------------------------------------------------------
        //  テキスト表示
        //------------------------------------------------------
        //  int fontNo                      フォント番号
        //  std::string                     表示する文字列
        //  float x         float y         表示位置 (x, y)
        //  float scaleX    float scaleY    スケール (x, y)
        //  float r                         赤成分 (0.0f ~ 1.0f)
        //  float g                         緑成分 (0.0f ~ 1.0f)
        //  float b                         青成分 (0.0f ~ 1.0f)
        //  float a                         不透明度 (0.0f ~ 1.0f)
        //------------------------------------------------------
        //  戻り値：float    表示した文字の高さを返す
        //------------------------------------------------------
        float textOut(int, std::string,
            float, float, float scaleX = ( 1 ), float scaleY = ( 1 ),
            float r = ( 1 ), float g = ( 1 ), float b = ( 1 ), float a = ( 1 ));

        //------------------------------------------------------
        //  テキスト表示
        //------------------------------------------------------
        //  int fontNo                  フォント番号
        //  std::string                 表示する文字列
        //  const VECTOR2&  position    表示位置 (x, y)
        //  const VECTOR2&  scale       スケール (x, y)
        //  const VECTOR4&  color       色 (r, g, b, a)
        //------------------------------------------------------
        //  戻り値：float    表示した文字の高さを返す
        //------------------------------------------------------
        float textOut(int, std::string,
            const VECTOR2&, const VECTOR2& scale = ( VECTOR2(1, 1) ),
            const VECTOR4& color = ( VECTOR4(1, 1, 1, 1) ));

        LPCSTR FormatString(LPCSTR format, ...);

    }

    //==========================================================================
    //
    //		input
    //
    //==========================================================================

    namespace input
    {

        //------------------------------------------------------
        //  入力マネージャの初期化
        //------------------------------------------------------
        void init();

        //------------------------------------------------------
        //  入力マネージャの更新
        //------------------------------------------------------
        void update();

        //------------------------------------------------------
        //  トリガー（押した瞬間）情報の取得
        //------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのトリガー情報
        //------------------------------------------------------
        int TRG(int);

        //------------------------------------------------------
        //  トリガー（離した瞬間）情報の取得
        //------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのトリガー情報
        //------------------------------------------------------
        int TRG_UP(int);

        //------------------------------------------------------
        //  ステート（状態）情報の取得
        //------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのステート情報
        //------------------------------------------------------
        int STATE(int);

        //------------------------------------------------------
        //  リピート（繰返し）情報の取得
        //------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのリピート情報
        //------------------------------------------------------
        int REPEAT(int);

        //------------------------------------------------------
        //  マウスカーソルのx座標を取得
        //------------------------------------------------------
        //  戻り値：int     マウスカーソルのx座標
        //------------------------------------------------------
        int getCursorPosX();

        //------------------------------------------------------
        //  マウスカーソルのy座標を取得
        //------------------------------------------------------
        //  戻り値：int     マウスカーソルのy座標
        //------------------------------------------------------
        int getCursorPosY();

        //------------------------------------------------------
        //  コントローラー情報の取得
        //------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //------------------------------------------------------
        //  戻り値：GameLib::PadState*  指定したプレイヤーのコントローラー情報
        //------------------------------------------------------
        PadState* getPadState(int);

    }

    //--------------------------------------------------------------------------
}


//******************************************************************************

#endif // !INCLUDED_GAME_LIB
